package com.mycompany.unit4test;

/**
 *
 * @author aradilla2025
 */
//import all classes needed 
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

/**
 * Main class where draw 5 unique cards and identify the highest one.
 */
public class Unit4Test {

    // the class will have both suit and rank, like listed bellow 
    static class Card {
        // Possible suits and ranks
        public static final String[] SUITS = {"Hearts", "Diamonds", "Clubs", "Spades"};
        public static final String[] RANKS = {
            "2", "3", "4", "5", "6", "7", "8", "9", "10",
            "Jack", "Queen", "King", "Ace"
        };
        
        private String suit;
        private String rank;

        /**
         * Constructor to create a Card with specified suit and rank.
         * @param suit The suit of the card - param something I learned for two attributes, name and value 
         * @param rank The rank of the card.
         */
        public Card(String suit, String rank) {
            this.suit = suit;
            this.rank = rank;
        }

        /**
         * Using switches, use cases, in this case 4 for jack, queen, king and ace 
         * @return The integer value of the rank.
         */
        public int getValue() {
            switch (rank) {
                case "Jack": return 11;
                case "Queen": return 12;
                case "King": return 13;
                case "Ace": return 14;
                default: return Integer.parseInt(rank);
            }
        }

        /**
         * Returns a string representation of the card.
         * @return The card's rank and suit.
         */
        @Override
        //return the ward with a rank and a suit 
        public String toString() {
            return rank + " of " + suit;
        }
    }

    /**
     * Main method to execute the card drawing simulation.
     * @param args using a command-line argument
     */
    public static void main(String[] args) {
        // Generate a standard deck of 52 unique cards
        List<Card> deck = generateDeck();

        // Shuffle the deck to randomize the order
        Collections.shuffle(deck, new Random());

        // Draw 5 unique cards from the deck
        List<Card> hand = drawCards(deck, 5);

        // Print the drawn hand
        System.out.println("Your hand:");
        for (int i = 0; i < hand.size(); i++) {
            System.out.println("Card " + (i + 1) + ": " + hand.get(i));
        }

        // Find and print the highest value card in the hand
        Card highest = findHighestCard(hand);
        System.out.println("\nHighest value card: " + highest);
    }

    /**
     * Generates a standard deck of 52 unique playing cards.
     * @return A list containing all 52 unique cards.
     */
    public static List<Card> generateDeck() {
        List<Card> deck = new ArrayList<>();
        // Iterate through each suit
        for (String suit : Card.SUITS) {
            // Iterate through each rank
            for (String rank : Card.RANKS) {
                // Create a new Card and add it to the deck
                deck.add(new Card(suit, rank));
            }
        }
        return deck;
    }

    /**
     * Draws a specified number of unique cards from the deck.
     * @param deck The deck of cards to draw from.
     * @param number The number of cards to draw.
     * @return A list containing the drawn cards.
     */
    public static List<Card> drawCards(List<Card> deck, int number) {
        if (number > deck.size()) {
            throw new IllegalArgumentException("Not enough cards in the deck to draw.");
        }
        // Return the first 'number' of cards from the shuffled deck
        return new ArrayList<>(deck.subList(0, number));
    }

    /**
     * Finds the card with the highest value in a list of cards.
     * @param cards The list of cards to evaluate.
     * @return The card with the highest value.
     */
    public static Card findHighestCard(List<Card> cards) {
        Card highest = cards.get(0);
        // Iterate through the cards to find the highest
        for (Card card : cards) {
            if (card.getValue() > highest.getValue()) {
                highest = card;
            }
        }
        return highest;
    }
}

