package com.mycompany.hangman;

/**
 *
 * @author aradilla2025
 */
//import the java scanner 
import java.util.Scanner;

//make the public class
public class Hangman {
    public static void main(String[] args) {
        // Start the game
        HangmanGame game = new HangmanGame();
        game.start();
    }
}

class HangmanGame {
    private String word; // This is a string for word that Player 2 needs to guess- player 1 decides
    private int maxAttempts; // The maximum number of incorrect guesses allowed- player 1 decides
    private Scanner scanner = new Scanner(System.in); // Scanner for user input from player 1 

    public void start() {
        // player 1 sets up the game
        System.out.println("Welcome to Hangman!");
        System.out.println("Player 1, please enter a word for Player 2 to guess:");
        //ensure this is only letters a-z, if numer or char tell them to redo 
        //* Validate input try { attempts = Integer.parseInt(scanner.nextLine()); if (attempts <= 0) {something like this 
        word = scanner.nextLine().toLowerCase(); // Convert all letters to lowercases

        // Player 1 decides the maximum number of incorrect guesses
        maxAttempts = getMaxAttempts();
        clearScreen();
        playGame();
    }

    //ensuring valid input
    private int getMaxAttempts() {
        int attempts = 0; // Initialize attempts
        while (attempts <= 0) {
            System.out.println("Player 1, enter the number of incorrect guesses Player 2 is allowed:");
            System.out.println("(Please type a whole number greater than 0 and press Enter)");

            // Validate input
            try {
                attempts = Integer.parseInt(scanner.nextLine());
                if (attempts <= 0) {
                    System.out.println("Number must be greater than 0. Try again.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please type a whole number.");
            }
        }
        return attempts;
    }

    // Clear the screen for Player 2
    private void clearScreen() {
        for (int i = 0; i < 50; i++) {
            System.out.println();
        }
        System.out.println("Welcome to Hangman!");
        System.out.println("Player 2, it's your turn! Let's guess the word!");
    }

    // Main game loop
    private void playGame() {
        char[] guessedWord = new char[word.length()]; // Array to track guessed letters
        for (int i = 0; i < guessedWord.length; i++) {
            guessedWord[i] = '_'; // Initialize with underscores
        }

        int attemptsLeft = maxAttempts; // Track remaining attempts
        boolean wordGuessed = false; // Track if the word is fully guessed

        // Game loop
        while (attemptsLeft > 0 && !wordGuessed) {
            System.out.println("\nWord to guess: " + String.join(" ", String.valueOf(guessedWord).split("")));
            System.out.println("You have " + attemptsLeft + " incorrect guesses left.");
            printHangman(maxAttempts - attemptsLeft); // Display hangman based on attempts used
            char guess = getValidGuess(); // Get a valid letter guess

            // Check if the guess is correct
            boolean correctGuess = false;
            for (int i = 0; i < word.length(); i++) {
                if (word.charAt(i) == guess && guessedWord[i] == '_') {
                    guessedWord[i] = guess; // Update guessed word
                    correctGuess = true;
                }
            }

            // Provide feedback based on the guess
            if (correctGuess) {
                System.out.println("Great guess!");
            } else {
                attemptsLeft--;
                System.out.println("Oops! That letter is not in the word.");
            }

            // Check if the word has been fully guessed
            wordGuessed = String.valueOf(guessedWord).equals(word);
        }

        // Game over: Display the result
        if (wordGuessed) {
            System.out.println("\nCongratulations! You guessed the word: " + word);
        } else {
            printHangman(maxAttempts); // Display the full hangman
            System.out.println("\nGame over. The word was: " + word);
        }
    }

    // Get a valid letter guess from Player 2
    private char getValidGuess() {
        char guess = ' ';
        while (true) {
            System.out.print("Enter a letter (a-z) and press Enter: ");
            String input = scanner.nextLine().toLowerCase();

            // Ensure the input is a single letter
            if (input.length() == 1 && Character.isLetter(input.charAt(0))) {
                guess = input.charAt(0);
                break;
            } else {
                System.out.println("Invalid input. Please enter a single letter (a-z).");
            }
        }
        return guess;
    }

    // Display the hangman based on the number of incorrect guesses
    private void printHangman(int stage) {
        String[] hangmanStages = {
            """
              +---+
                  |
                  |
                  |
                 ===
            """,
            """
              +---+
              O   |
                  |
                  |
                 ===
            """,
            """
              +---+
              O   |
              |   |
                  |
                 ===
            """,
            """
              +---+
              O   |
             /|   |
                  |
                 ===
            """,
            """
              +---+
              O   |
             /|\\  |
                  |
                 ===
            """,
            """
              +---+
              O   |
             /|\\  |
             /    |
                 ===
            """,
            """
              +---+
              O   |
             /|\\  |
             / \\  |
                 ===
            """
        };
        // Ensure the stage doesn't exceed the number of available hangman stages
        stage = Math.min(stage, hangmanStages.length - 1);
        System.out.println(hangmanStages[stage]);
    }
}

